@page "/products"
@layout MainLayout
@inject InventoryManagementBlazorClient.Services.ProductService productService
@inject InventoryManagementBlazorClient.Services.CategoryService categoryService
@inject InventoryManagementBlazorClient.Services.SupplierService supplierService
@inject NavigationManager NavigationManager
@using InventoryManagementBlazorClient.Models
@using InventoryManagementBlazorClient.Dtos
@using System.Net.Http

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Product List</h3>
    <button class="btn btn-success" @onclick="OpenAddProductModal">Add New Product</button>
</div>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (products != null)
{
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Product Name</th>
                <th scope="col">Price</th>
                <th scope="col">Quantity</th>
                <th scope="col">Category</th>
                <th scope="col">Supplier</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.Quantity</td>
                    <td>@product.CategoryName</td>
                    <td>@product.SupplierName</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => OpenEditProductModal(product)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteProductModal(product)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal for Add/Edit Product -->
@if (showModal && isEditMode)
{
    <div class="modal" tabindex="-1" style="display: block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@ModalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <!-- Add/Edit Product Form -->
                    <EditForm Model="@selectedProduct" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Name:</label>
                            <InputText class="form-control" @bind-Value="selectedProduct.Name" />
                            <ValidationMessage For="@(() => selectedProduct.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description:</label>
                            <InputTextArea class="form-control" @bind-Value="selectedProduct.Description" />
                            <ValidationMessage For="@(() => selectedProduct.Description)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Price:</label>
                            <InputNumber class="form-control" @bind-Value="selectedProduct.Price" />
                            <ValidationMessage For="@(() => selectedProduct.Price)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Quantity:</label>
                            <InputNumber class="form-control" @bind-Value="selectedProduct.Quantity" />
                            <ValidationMessage For="@(() => selectedProduct.Quantity)" />
                        </div>

                        <!-- Category Dropdown -->
                        <div class="mb-3">
                            <label class="form-label">Category:</label>
                            <select class="form-control" @bind="selectedProduct.CategoryId">
                                @foreach (var category in categories)
                                {
                                    <option value="@category.CategoryId">@category.Name</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => selectedProduct.CategoryId)" />
                        </div>

                        <!-- Supplier Dropdown -->
                        <div class="mb-3">
                            <label class="form-label">Supplier:</label>
                            <select class="form-control" @bind="selectedProduct.SupplierId">
                                @foreach (var supplier in suppliers)
                                {
                                    <option value="@supplier.Id">@supplier.Name</option>
                                }
                            </select>
                            <ValidationMessage For="@(() => selectedProduct.SupplierId)" />
                        </div>

                        <button type="submit" class="btn btn-primary">@ButtonLabel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal for Confirm Delete -->
@if (showModal && !isEditMode)
{
    <div class="modal" tabindex="-1" style="display: block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <!-- Delete Confirmation -->
                    <p>Are you sure you want to delete the product <strong>@selectedProduct.Name</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Confirm Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Product>? products;
    private ProductDto newProduct = new ProductDto();
    private ProductDto selectedProduct = new ProductDto();
    private List<Category>? categories;
    private List<Supplier>? suppliers;
    private bool isLoading = true;
    private bool showModal = false;
    private string? errorMessage;
    private bool isEditMode = true;

    private string ModalTitle => isEditMode ? (selectedProduct.ProductId == 0 ? "Add Product" : "Edit Product") : "Delete Product";
    private string ButtonLabel => selectedProduct.ProductId == 0 ? "Add Product" : "Save Changes";

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            products = await productService.GetProductsAsync();
            categories = await categoryService.GetCategoriesAsync();
            suppliers = await supplierService.GetSuppliersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private ProductDto MapProductToDto(Product product)
    {
        return new ProductDto
            {
                ProductId = product.ProductId,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                Quantity = product.Quantity,
                CategoryId = product.CategoryId,
                SupplierId = product.SupplierId
            };
    }

    private void OpenAddProductModal()
    {
        selectedProduct = new ProductDto
            {
                Name = string.Empty,
                Description = string.Empty,
                Price = 0,
                Quantity = 0,
                CategoryId = 0,
                SupplierId = 0
            };
        isEditMode = true;  // We are editing (adding a new product)
        showModal = true;
        Console.WriteLine("Add Product Modal Opened");
    }

    private void OpenEditProductModal(Product product)
    {
        selectedProduct = MapProductToDto(product);
        isEditMode = true;  // We are editing
        showModal = true;
    }

    private void OpenDeleteProductModal(Product product)
    {
        selectedProduct = MapProductToDto(product);
        isEditMode = false;  // We are deleting, so we don't need the form
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Form Submitted");
        HttpResponseMessage response;
        if (selectedProduct.ProductId == 0) // New product
        {
            response = await productService.CreateProductAsync(new Product
                {
                    Name = selectedProduct.Name,
                    Description = selectedProduct.Description,
                    Price = selectedProduct.Price,
                    Quantity = selectedProduct.Quantity,
                    CategoryId = selectedProduct.CategoryId,
                    SupplierId = selectedProduct.SupplierId
                });
        }
        else // Edit existing product
        {
            response = await productService.UpdateProductAsync(selectedProduct.ProductId, new Product
                {
                    ProductId = selectedProduct.ProductId,
                    Name = selectedProduct.Name,
                    Description = selectedProduct.Description,
                    Price = selectedProduct.Price,
                    Quantity = selectedProduct.Quantity,
                    CategoryId = selectedProduct.CategoryId,
                    SupplierId = selectedProduct.SupplierId
                });
        }

        if (response.IsSuccessStatusCode)
        {
            CloseModal();
            products = await productService.GetProductsAsync(); // Refresh the list
        }
        else
        {
            errorMessage = "Failed to save the product. Please try again.";
        }
    }

    private async Task ConfirmDelete()
    {
        HttpResponseMessage response = await productService.DeleteProductAsync(selectedProduct.ProductId);
        if (response.IsSuccessStatusCode)
        {
            CloseModal();
            products = await productService.GetProductsAsync(); // Refresh the list
        }
        else
        {
            errorMessage = "Failed to delete the product. Please try again.";
        }
    }

    private void ViewDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product-detail/{productId}");
    }
}



